
// SplashingWaterClient.cpp : 定义应用程序的类行为。
//

#include "stdafx.h"
#include "SplashingWaterClient.h"
#include "SplashingWaterClientDlg.h"
#include "LogicDlg.h"
#include "MessageBuffer.h"
#include "MainPageDlg.h"
#include "StateStrategy.h"
#include "SmartPtr.h"
#include "ConfigReader.h"
#include "Converter.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CSplashingWaterClientApp

BEGIN_MESSAGE_MAP(CSplashingWaterClientApp, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CSplashingWaterClientApp 构造

CSplashingWaterClientApp::CSplashingWaterClientApp()
{
	// 支持重新启动管理器
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_RESTART;

	// TODO:  在此处添加构造代码，
	// 将所有重要的初始化放置在 InitInstance 中
}


// 唯一的一个 CSplashingWaterClientApp 对象

CSplashingWaterClientApp theApp;


// CSplashingWaterClientApp 初始化

BOOL CSplashingWaterClientApp::InitInstance()
{
	// 如果一个运行在 Windows XP 上的应用程序清单指定要
	// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，
	//则需要 InitCommonControlsEx()。  否则，将无法创建窗口。
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 将它设置为包括所有要在应用程序中使用的
	// 公共控件类。
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();


	AfxEnableControlContainer();

	ConfigReader configReader;
	string strLogLevel = configReader.read("LogLevel");
	LogManager::getInstance()->setOutLevel(std::stoi(strLogLevel));
	

	HttpClient::getInstance();
	MessageBuffer::getInstance();

	HttpClient::getInstance()->initial();
	MessageBuffer::getInstance()->initial();

	
	
	string strServerIP = configReader.read("ServerIP");
	if (!HttpClient::getInstance()->connectServer(strServerIP.c_str(), 5120)) //服务器127.0.0.1，端口号
	{
		return FALSE;
	}
	


	// 创建 shell 管理器，以防对话框包含
	// 任何 shell 树视图控件或 shell 列表视图控件。
	CShellManager *pShellManager = new CShellManager;

	// 激活“Windows Native”视觉管理器，以便在 MFC 控件中启用主题
	CMFCVisualManager::SetDefaultManager(RUNTIME_CLASS(CMFCVisualManagerWindows));

	// 标准初始化
	// 如果未使用这些功能并希望减小
	// 最终可执行文件的大小，则应移除下列
	// 不需要的特定初始化例程
	// 更改用于存储设置的注册表项
	// TODO:  应适当修改该字符串，
	// 例如修改为公司或组织名
	SetRegistryKey(_T("应用程序向导生成的本地应用程序"));
	

	INT_PTR nResponse;
	
	LogicDlg logicDlg;
	m_pMainWnd = &logicDlg;
	nResponse = logicDlg.DoModal();
	if (nResponse == IDCANCEL)
	{
		SmartPtr<IStrategy> offline = new StateStrategy(0);
		offline->processPackage();
		return FALSE;
	}

	MainPageDlg mdlg;
	m_pMainWnd = &mdlg;
	nResponse = mdlg.DoModal();
	if (nResponse == IDOK)
	{
		// TODO:  在此放置处理何时用
		//  “确定”来关闭对话框的代码
	}
	else
	{

	}

	SmartPtr<IStrategy> offline = new StateStrategy(0);
	offline->processPackage();
	
	MessageBuffer::DestoryInstance();


	// 删除上面创建的 shell 管理器。
	if (pShellManager != NULL)
	{
		delete pShellManager;
	}

	HttpClient::getInstance()->disConnectServer();
	// 由于对话框已关闭，所以将返回 FALSE 以便退出应用程序，
	//  而不是启动应用程序的消息泵。
	return FALSE;
}

